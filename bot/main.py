import argparse
import asyncio
import json
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BotCommand, FSInputFile
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from api.v1 import users, google_calendar
from core.config import Config
from middleware.user_access import UserAccessMiddleware, AdminAccessMiddleware

config = Config()
parser = argparse.ArgumentParser()
parser.add_argument('--webhook', action=argparse.BooleanOptionalAction)
args = parser.parse_args()


async def welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` command
    """
    await message.reply("Hello my friendüçª")


async def description(message: types.Message):
    """
    This handler will be called when user sends `/about` command
    """
    await message.reply("<b>–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</b>\n\n"
                        "–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É.\n\n"
                        "<b>/next</b> –≤—ã–≤–µ–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
                        "<b>/list</b> –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                        "–≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
                        "–ù–∞–∂–∞–º–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
                        "–ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ—è–≤–∏–ª–æ—Å—å/—É–¥–∞–ª–∏–ª–æ—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
                        )


async def admin_description(message: types.Message):
    """
    This handler will be called when user sends `/admin` command
    """
    await message.reply("<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n\n"
                        "–ö–æ–º–∞–Ω–¥—ã:\n\n"
                        "<b>/new_user</b> –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö,\n"
                        "–∫–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n"
                        "1. –í–≤–æ–¥–∏–º id –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å(9—Ç–∏ –∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ)\n"
                        "2. –í–≤–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
                        "<b>/user_list</b> –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        "–≤ –≤–∏–¥–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                        "–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.\n\n"
                        )


async def set_commands(bot: Bot):
    """
    Sets commands menu.
    """
    commands = [
        BotCommand(command="next", description="–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        BotCommand(command="about", description="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω–∫–∞"),
    ]

    await bot.set_my_commands(commands=commands)


async def polling_setup(bot: Bot, dp: Dispatcher):
    """
    Run bot via polling.
    """
    await bot.delete_webhook()
    await set_commands(bot)
    await dp.start_polling(bot)


async def webhook_setup(bot: Bot):
    """
    Run bot via webhook.
    """
    await bot.delete_webhook()
    await set_commands(bot)
    cert = FSInputFile(config.path_to_pem_file)
    await bot.set_webhook(url=config.server_url,
                          ip_address=config.server_ip,
                          certificate=cert)
    info = await bot.get_webhook_info()
    info = json.loads(info.json())
    logging.info(f"webhook info:\n{json.dumps(info, indent=4)}")


if __name__ == '__main__':
    logging.basicConfig(format="%(asctime)s %(message)s",
                        datefmt="%m/%d/%Y %I:%M:%S %p %Z",
                        level=logging.INFO)

    bot = Bot(token=config.tg_bot_token, parse_mode="HTML")
    dp = Dispatcher()
    dp.message.register(description, Command(commands=["about"]))
    dp.message.register(admin_description, Command(commands=["admin"]))
    dp.include_router(google_calendar.router)
    dp.include_router(users.router)
    dp.message.middleware(AdminAccessMiddleware())
    dp.message.outer_middleware(UserAccessMiddleware())

    webhook = args.webhook
    if webhook:
        logging.info("Run webhook")
        dp.startup.register(webhook_setup)
        app = web.Application()
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="")
        setup_application(app, dp, bot=bot)
        web.run_app(app)
    else:
        logging.info("Run polling")
        asyncio.run(polling_setup(bot=bot, dp=dp))
